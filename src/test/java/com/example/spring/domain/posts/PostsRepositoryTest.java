package com.example.spring.domain.posts;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
// 별다른 설정 없이 @SpringBootTest 를 사용할 경우 H2 데이터베이스를 자동으로 실행시킴
public class PostsRepositoryTest {

    @Autowired
    PostsRepository postsRepository;

    @After
    // JUnit 단위 테스트가 끝날 때마다 수행되는 메소드를 지정
    // 배포 전 전체 테스트간 데이터 침범을 막기 위해 사용
    public void cleanup() {
        postsRepository.deleteAll();
    }

    @Test
    public void 게시글저장_불러오기() {
        // given
        String title = "테스트 게시글";
        String content = "테스트 본문";

        // 테이블 posts에 insert/update 쿼리를 실행
        // postsRepository.save : id 값이 있다면 update, 없다면 insert 쿼리가 실행
        postsRepository.save(Posts.builder()
                .title(title)
                .content(content)
                .author("abc@gmail.com")
                .build());

        // when
        List<Posts> postsList = postsRepository.findAll();
        // postsRepository.findAll() : 테이블 posts에 있는 모든 데이터를 조회해오는 메소드

        // then
        Posts posts = postsList.get(0);
        assertThat(posts.getTitle()).isEqualTo(title);
        assertThat(posts.getContent()).isEqualTo(content);

    }

    @Test
    public void BaseTimeEntity_등록() {
        // given
        LocalDateTime now = LocalDateTime.of(2021, 8, 24, 0, 0 ,0);

        postsRepository.save(Posts.builder()
                .title("title")
                .content("content")
                .author("author")
                .build());

        // when
        List<Posts> postsList = postsRepository.findAll();

        // then
        Posts posts = postsList.get(0);

        System.out.println(">>>> createDate=" + posts.getCreatedDate() + ", modifiedDate=" + posts.getModifiedDate());

        assertThat(posts.getCreatedDate()).isAfter(now);
        assertThat(posts.getModifiedDate()).isAfter(now);

    }

}

// 실제로 실행된 쿼리는 어떤 형태일까?? >> resource/application.properties >> spring.jpa.show_sql=true 작성
// 실행 결과 insert table posts(id bigint generated by default as identity) 로 출력됨 >> H2 쿼리 문법이 적용돼있기 때문

// 쿼리 로그를 MySQL 버전으로 변경 >> resource/application.properties >> spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
// 적용 안 됨ㅠㅠ